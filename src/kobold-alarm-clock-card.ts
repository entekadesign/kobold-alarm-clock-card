import { AlarmController } from './alarm-controller';
import { Helpers } from './helpers';
import './alarm-picker';
import './kobold-card-editor';

import { LitElement, html, css, PropertyValues } from 'lit';
// import { classMap } from 'lit/directives/class-map.js';
import { property, state, customElement, query, queryAll } from "lit/decorators.js";

// function loadCSS(url: string) {
//   const link = document.createElement('link');
//   link.type = 'text/css';
//   link.rel = 'stylesheet';
//   link.href = url;
//   document.head.appendChild(link);
// }
// loadCSS('https://fonts.googleapis.com/css2?family=Noto+Sans:wdth,wght@87.5,600&display=swap');
// loadCSS('https://fonts.googleapis.com/css2?family=Oswald:wght@600&display=swap');
// loadCSS('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@600&display=swap');

// fontStyles: woff & woff2 fontfaces converted to base64 and added to @font-face declarations, which are placed into single string (i.e., no line breaks)
const fontStyles = '@font-face { font-family: "noto_sansmedium"; src: url(data:application/font-woff2;charset=utf-8;base64,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) format("woff2"), url(data:application/font-woff;charset=utf-8;base64,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) format("woff"); font-weight: normal; font-style: normal; font-display: swap; } @font-face { font-family: "oswald_regularregular"; src: url(data:application/font-woff2;charset=utf-8;base64,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) format("woff2"), url(data:application/font-woff;charset=utf-8;base64,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) format("woff"); font-weight: normal; font-style: normal; font-display: swap; } @font-face { font-family: "ibm_plex_sansmedium"; src: url(data:application/font-woff2;charset=utf-8;base64,) format("woff2"), url(data:application/font-woff;charset=utf-8;base64,) format("woff"); font-weight: normal; font-style: normal; font-display: swap; }';
let myStyle = document.createElement('style');
myStyle.innerHTML = fontStyles;
document.head.appendChild(myStyle);

import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat';
import relativeTime from 'dayjs/plugin/relativeTime';
dayjs.extend(customParseFormat);
dayjs.extend(relativeTime);

import type { CardConfig, NextAlarmObject, KoboldEditor } from './types';

// HA types
import type { HomeAssistant, LovelaceCard, LovelaceCardConfig } from "custom-card-helpers";

declare global {
  interface Window {
    hassConnection?: Promise<any>;
    loadCardHelpers(): Promise<void>;
    customCards: Array<any>;
    setMyEditMode(parameter?: boolean): void;
  }
  interface Node {
    host: any;
  }
  interface HuiCardOptions extends LitElement {
    path: [number, number] | [number, number, number];
  }
}

// const DOMAINS_ALARM_ENTITIES = [
//   "input_boolean",
//   "switch",
//   "media_player"
// ];

window.customCards = window.customCards || [];
window.customCards.push({
  type: "kobold-alarm-clock-card",
  name: "Kobold",
  description: "A multi-alarm clock for Home Assistant",
  preview: true,
  documentationURL: "https://codeberg.org/entekadesign/kobold-alarm-clock-card#readme",
});

@customElement('kobold-alarm-clock-card')
class KoboldAlarmClockCard extends LitElement {

  private _cardId: string = Math.random().toString(36).slice(2, 9) + ', ' + new Date().toISOString();
  private _config: CardConfig;
  private _updateLoopId: number;
  private _alarmController: AlarmController;
  private _ringingBegun: boolean;
  private _elements: Array<LovelaceCard>;
  private _injectStylesDone: boolean;
  private _cardHelpers: any;
  // private _dark: boolean;
  // private _time: string;
  // private _ringing: boolean;
  // private _controllersAlarmConfigLastUpdate: string;

  @state() _nextAlarm: NextAlarmObject;
  @state() _hass: HomeAssistant;
  @state() _time: string;
  // @state() _alarmClockClasses: { [key: string]: boolean };
  // @state() _alarmButtonsClasses: { [key: string]: boolean };
  // @state() _footClasses: { [key: string]: boolean };
  // @state() _clockClasses: { [key: string]: boolean };
  @state() _koboldEditor: KoboldEditor;

  @property({ type: Boolean, reflect: true }) public preview = false;

  @query('#clock', true) _clockQ: HTMLElement;
  @query('#koboldClock', true) _koboldClockQ: HTMLElement;
  @query('#foot', true) _footQ: HTMLElement;
  @query('#alarmButtons', true) _alarmButtonsQ: HTMLElement;
  @query('#date', true) _dateQ: HTMLElement;
  @query('ha-card', true) _haCardQ: HTMLElement;
  @queryAll('div.settingsButtons ha-icon') _settingsButtonsHostsQ: NodeListOf<HTMLElement>;
  @query('#extraInfo', true) _extraInfoQ: HTMLElement;
  @query('#alarmTop div#koboldLogo', true) _koboldLogoQ: HTMLElement;
  @query('alarm-picker', true) _alarmPickerQ: HTMLElement;

  connectedCallback() {
    super.connectedCallback();

    this._updateLoop();

    if (this._config.debug) {
      this._hass.callService('system_log', 'write', { 'message': '*** connectedCallback(); _cardID: ' + this._cardId, 'level': 'info' });
      console.warn('*** connectedCallback(); _cardID: ' + this._cardId);
    };

    // recover from disconnect, e.g., HA restart
    window.addEventListener('connection-status', this._connectionStatusEvent);
    Helpers.getHa().addEventListener('kobold-editor', this._koboldEditorEvent);
    Helpers.getHa().addEventListener('dialog-closed', this._dialogClosedEvent);
    window.setMyEditMode = (mode = true) => {
      const ll = Helpers.getLovelace();
      if (ll && ll.lovelace.editMode !== mode) {
        ll.lovelace.setEditMode(mode);
      }
    };
    // this.addEventListener('ll-rebuild', (ev) => {
    //   ev.stopPropagation();
    //   console.log('*** rebuilding card');
    // });
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    clearTimeout(this._updateLoopId);
    if (this._config.debug) {
      this._hass.callService('system_log', 'write', { 'message': '*** disconnectedCallback(); _cardID: ' + this._cardId, 'level': 'info' });
      console.warn(' *** disconnectedCallback(); _cardID: ' + this._cardId);
    };
    window.removeEventListener('connection-status', this._connectionStatusEvent);
    Helpers.getHa().removeEventListener('kobold-editor', this._koboldEditorEvent);
    Helpers.getHa().removeEventListener('dialog-closed', this._dialogClosedEvent);
  }

  _connectionStatusEvent = (event: CustomEvent) => {
    if (event.detail === 'connected') {
      if (this._config.debug) {
        this._hass.callService('system_log', 'write', { 'message': '*** Recovering from disconnect', 'level': 'info' });
        console.warn('*** Recovering from disconnect');
      };

      // If temporarily disconnected, reload browser after 90-second delay
      // window.setTimeout(() => {
      //   location.reload();
      // }, 1000 * 90);

      // If HA restarts, reload browser
      window.hassConnection.then(({ conn }) => {
        conn.subscribeEvents(() => {
          window.setTimeout(() => {
            this._hass.callService('system_log', 'write', { 'message': '*** HA Restarted. Refreshing browser', 'level': 'info' });
            window.setTimeout(() => {
              location.reload();
            }, 1000 * 2);
          }, 1000 * 60);
        }, 'homeassistant_started');
      });
    }
  }

  _dialogClosedEvent = (event: CustomEvent) => {
    // NOTE: this will fire when closing any edit dialog
    if (event.detail.dialog === 'hui-dialog-edit-card') {
      window.setMyEditMode(false);
      window.setTimeout(() => {
        // replace browser history with path lacking edit parameter
        // see _handleClosed https://github.com/home-assistant/frontend/blob/f3380891486c01f2a75c83524578b5aeed85f114/src/dialogs/make-dialog-manager.ts
        const base = window.location.pathname;
        window.history.replaceState(null, '', base);
      }, 100);
    }
  }

  _koboldEditorEvent = (event: CustomEvent) => {
    this._koboldEditor = event.detail.editorEl;
  }

  static getConfigElement() {
    // console.log('*** getting editor');
    return document.createElement("kobold-card-editor");
    // const el: any = document.createElement("kobold-card-editor");
    // el.setAttribute('alarm-controller', this._alarmController);
    // console.log('*** getConfigElement; this: ', this.preview);
    // el.controller = this._alarmController;
    // return el;
  }

  static getStubConfig(hass, entities) {
    // console.log('*** getStubConfig; entities: ', entities);
    const ents = entities.filter((e) => {
      const domain = e.split(".")[0];
      // console.log('*** getStubConfig; domain: ', domain);
      return AlarmController.DOMAINS_ALARM_ENTITIES.includes(domain);
    });
    // console.log('*** getStubConfig; ents: ', ents[Math.floor(Math.random() * ents.length)] || "");
    // console.log('*** getStubConfig; ents: ', ents);
    const alarmEntities = [ents.includes('input_boolean.kobold_clock') ? 'input_boolean.kobold_clock' : ents[0]];
    // console.log('*** getStubConfig; alarm_entities: ', alarmEntities);

    // console.log('*** getStubConfig; customCards: ', window.customCards);
    // console.log('*** getStubConfig; preview: ', this.preview);
    // Return a minimal configuration that will result in a working card configuration

    return {
      alarm_entities: alarmEntities,
      ...AlarmController.defaultConfig(AlarmController.createNextAlarm({ enabled: false, time: "07:00:00" })),
    }
    // return Helpers.defaultConfig;
  }

  protected willUpdate(_changedProperties: PropertyValues): void {
    // add glow to elements when background dark
    // var cardBackgroundColor = window.getComputedStyle(Helpers.getBackground())?.getPropertyValue("background-color");
    // const matchPattern = /rgb\((\d{1,3}), (\d{1,3}), (\d{1,3})\)/;
    // const matches = matchPattern.exec(cardBackgroundColor);
    // if (matches) {
    //   const brightness = Math.round(((parseInt(matches[1]) * 299) + (parseInt(matches[2]) * 587) + (parseInt(matches[3]) * 114)) / 1000);
    //   // const brightness = Math.round(((parseInt(255) * 299) + (parseInt(255) * 587) + (parseInt(255) * 114)) / 1000);  // range: 0-255
    //   // console.log('*** firstUpdated; brightness of background: ', brightness);
    //   if (brightness < 64) {
    //     this._glow = true;
    //   } else {
    //     this._glow = false;
    //   }
    // }

  }

  // protected update(_changedProperties: PropertyValues): void {
  //   super.update(_changedProperties);
  //   // console.log('*** update(); changed properties: ', _changedProperties);
  // }

  protected firstUpdated(_changedProperties: PropertyValues): void {
    // const preview = Helpers.getHa().shadowRoot.querySelector('hui-dialog-create-card').shadowRoot.querySelector('hui-card-picker');

    this.preview = this.preview || this.parentElement.classList.contains('preview') ? true : false;

    // console.log('*** firstUpdated; parentElement contains preview: ', this.parentElement?.classList.contains('preview'));

    // console.log('*** firstUpdated; this._hass.states: ', this._hass.states);

    // console.log('*** firstUpdated; this._config ', this._config);
    // console.log('*** firstUpdated; in dark mode: ', window.matchMedia('(prefers-color-scheme: dark)').matches);
    // const colorScheme = document.querySelector('meta[name="color-scheme"]').content);
    // const colorScheme: HTMLMetaElement = document.querySelector('meta[name="color-scheme"]').getAttribute('content');
    // console.log('*** firstUpdated; in dark mode: ', colorScheme);


    if (document.querySelector('meta[name="color-scheme"]').getAttribute('content') === 'dark') {
      if (this._alarmPickerQ) {
        this.classList.add('dark');
        this._alarmPickerQ.classList.add('dark');
      } else {
        this.classList.remove('dark');
        this._alarmPickerQ.classList.remove('dark');
      }
    }

    // console.log('*** atLeastVersion: ', Helpers.atLeastVersion(this._hass.config.version, 2024, 6));
    if (!this._alarmController.isAlarmRinging()) {
      // when card starts up, hide cards (prevents flicker during save)
      this._hideCards(true);
      window.setTimeout(() => {
        if (!this._config.hide_cards_default && this._config.cards) this._hideCards(false);
      }, 250);
    }
    this._updateTime();

    if (this._haCardQ) {
      // console.log('*** _buildCard(); extraInfoQ kobold-card: ', this._extraInfoQ.querySelectorAll('*')); //'[kobold-card="true"]'));
      // console.log('*** _buildCard(); extraInfoQ.childElementCount: ', this._extraInfoQ.childElementCount);
      // console.log('*** _buildCard(); extraInfoQ: ', this._extraInfoQ);
      // console.log('*** _buildCard(); extraInfoQ.children: ', this._extraInfoQ.children);
      // console.log('*** _buildCard(); extraInfoQ.childNodes: ', this._extraInfoQ.childNodes);
      // if (!this.preview) this._buildCard();
      this._buildCard();
    } else {
      console.warn('*** firstUpdated(); Missing <ha-card> in shadowRoot')
    }
  }

  protected updated(_changedProperties: PropertyValues): void {
    // console.log('*** updated; changeProperties: ', _changedProperties);
    // if (_changedProperties.has('_nextAlarm')) console.log('*** Card updated(); nextAlarm changed: ', this._nextAlarm);

    const cardWidth = this.getBoundingClientRect().width;
    // console.log('*** card width: ', cardWidth);
    // if (this._koboldClockQ && this._alarmPickerQ) {
    //   if (cardWidth < 750) {
    //     this._koboldClockQ.classList.add('narrow');
    //     this._alarmPickerQ.classList.add('narrow');
    //   } else {
    //     this._koboldClockQ.classList.remove('narrow');
    //     this._alarmPickerQ.classList.remove('narrow');
    //   }
    // }
    if (this._alarmPickerQ) {
      if (cardWidth < 750) {
        this.classList.add('narrow');
        this._alarmPickerQ.classList.add('narrow');
      } else {
        this.classList.remove('narrow');
        this._alarmPickerQ.classList.remove('narrow');
      }
    }


    if (!this._injectStylesDone) {
      this._injectStylesDone = true;

      // Is Kobold displayed in Kiosk mode?

      // let cardWidth = this.offsetWidth;
      // let windowWidth = Helpers.getHa().offsetWidth;
      // if (cardWidth === 0 || windowWidth === 0) {
      // cardWidth = this.getBoundingClientRect().width;
      // windowWidth = window.innerWidth;
      // }

      if (cardWidth === window.innerWidth) {

        // console.log('*** kobold is in kiosk mode; card width: ' + this.offsetWidth + '; HA width: ' + Helpers.getHa().offsetWidth);
        // hide visible line separating sidebar from main view on iOS
        if (Helpers.getDrawer()) Helpers.getDrawer().style.borderRightStyle = 'unset';

        // prevent scrolling
        document.querySelector('body').style.overflow = 'hidden';
        document.querySelector('body').style.position = 'fixed';
        document.querySelector('body').style.width = '100%';
      }

      // if (document.querySelector('meta[name="color-scheme"]').getAttribute('content') === 'dark') {
      //   if (this._alarmPickerQ) {
      //     this.classList.add('dark');
      //     this._alarmPickerQ.classList.add('dark');
      //   } else {
      //     this.classList.remove('dark');
      //     this._alarmPickerQ.classList.remove('dark');
      //   }
      // }

      if (this._config.cards?.length > 0) this._haCardQ.style.borderBottomStyle = 'unset';

      // // add glow to numerals when background dark
      // var cardBackgroundColor = window.getComputedStyle(Helpers.getBackground())?.getPropertyValue("background-color");
      // const matchPattern = /rgb\((\d{1,3}), (\d{1,3}), (\d{1,3})\)/;
      // const matches = matchPattern.exec(cardBackgroundColor);
      // if (matches) {
      //   const brightness = Math.round(((parseInt(matches[1]) * 299) + (parseInt(matches[2]) * 587) + (parseInt(matches[3]) * 114)) / 1000);
      //   // const brightness = Math.round(((parseInt(255) * 299) + (parseInt(255) * 587) + (parseInt(255) * 114)) / 1000);  // range: 0-255
      //   // console.log('*** firstUpdated; brightness of background: ', brightness);
      //   if (brightness < 64) {
      //     this._glow = true;
      //     this._clockQ.classList.add('glow');
      //     this._alarmButtonsQ.querySelectorAll('button').forEach((button) => { button.classList.add('glow') });
      //   } else {
      //     this._clockQ.classList.remove('glow');
      //     this._alarmButtonsQ.querySelectorAll('button').forEach((button) => { button.classList.remove('glow') });
      //   }
      // }

      // add glow to numerals and nextAlarm switch when background dark
      // if (this._glow) {
      //   this._clockQ.classList.add('glow');
      //   this._alarmButtonsQ.querySelectorAll('button').forEach((button) => { button.classList.add('glow') });
      // } else {
      //   this._clockQ.classList.remove('glow');
      //   this._alarmButtonsQ.querySelectorAll('button').forEach((button) => { button.classList.remove('glow') });
      // }

      // if (this._config.dark_mode) {
      // if (document.querySelector('meta[name="color-scheme"]').getAttribute('content') === 'dark') {
      //   this._clockQ.classList.add('dark');
      //   this._alarmButtonsQ.querySelectorAll('button').forEach((button) => { button.classList.add('dark') });
      // } else {
      //   this._clockQ.classList.remove('dark');
      //   this._alarmButtonsQ.querySelectorAll('button').forEach((button) => { button.classList.remove('dark') });
      // }


      // let myStyle: HTMLElement;
      // if (this._clockQ) {
      //   const clockStyle = '';
      //   myStyle = document.createElement('style');
      //   myStyle.innerHTML = clockStyle;
      //   this._clockQ.appendChild(myStyle);
      // }


      // inject style into mdc form fields
      let myStyle: HTMLElement;

      //  alarmTop styles
      if (this._settingsButtonsHostsQ) {
        // const settingsButtonsStyle = 'ha-svg-icon { height: calc(1.5rem + 1vh); width: calc(1.5rem + 1vh); }';
        const settingsButtonsStyle = 'ha-svg-icon { height: calc(1.5rem + 1vh); height: calc(1.25rem + 0.5cqw); width: calc(1.5rem + 1vh); width: calc(1.25rem + 0.5cqw); }';
        this._settingsButtonsHostsQ.forEach((settingsButtonsHost) => {
          myStyle = document.createElement('style');
          myStyle.innerHTML = settingsButtonsStyle;
          settingsButtonsHost.shadowRoot.appendChild(myStyle);
        });
      }
    }
  }

  setConfig(config: CardConfig) {

    if (!config) {
      alert('Card config incorrectly formatted or missing.');
    }

    if (!config.cards || !Array.isArray(config.cards)) {
      if (config.debug) {
        this._hass.callService('system_log', 'write', { 'message': '*** setConfig(); No HA cards available to configure', 'level': 'info' });
        console.warn('*** setConfig(); No HA cards available to configure');
      };
    }
    if (!config.alarm_entities || !Array.isArray(config.alarm_entities)) {
      if (config.debug) {
        this._hass.callService('system_log', 'write', { 'message': '*** setConfig(); No array of alarm_entities found in card configuration', 'level': 'info' });
        console.warn('*** setConfig(); No array of alarm_entities found in card configuration');
      };
    }

    this._config = config;
    // this._config = Helpers.deepMerge(Helpers.defaultConfig, config); //only helpful if inside editor
    // console.log('*** Card setConfig: config: ', this._config);
    // Helpers.fireEvent('config-changed', { config: this._config }, Helpers.getEditor()); //only works inside editor
    // console.log('*** Card setConfig: config.nextAlarm: ', this._config.next_alarm);

    // NOTE: Some cards call setConfig() multiple times during life of card
    if (!this._alarmController) this._alarmController = new AlarmController(this._config, this._cardId);
  }

  set hass(hass: HomeAssistant) {

    this._hass = hass;
    this._alarmController.hass = hass;

    dayjs.locale(hass.language);

    if (this._elements) {
      this._elements.forEach((element) => {
        element.hass = hass;
      });
    }
  }

  getCardSize() {
    return 3;
  }

  _buildCard() {
    if (!this._extraInfoQ) console.warn('*** _buildCard(); Card root (element id "extraInfo") not available');

    while (this._extraInfoQ.lastChild) {
      this._extraInfoQ.removeChild(this._extraInfoQ.lastChild);
    }

    const config = this._config;

    if (config.alarm_entities && Array.isArray(config.alarm_entities)) {
      config.alarm_entities.forEach((item) => { if (!this._hass.states[item]) console.warn(`*** _buildCard(); Entity ${item} does not exist in HA`) });
    } else {
      alert('No array of alarm_entities found in card configuration. One is required for alarm.');
    }

    if (config.cards) {
      const elements = this._elements = [];
      Promise.all(config.cards.map(async (card: LovelaceCardConfig) => {
        const element = await this._createCardElement(card);
        // element.setAttribute('kobold-card', 'true');
        if (card.type === 'media-control') element.setAttribute('type-media-control', 'true');
        elements.push(element);
        this._extraInfoQ.appendChild(element);
      })).
        catch(error => {
          console.error('*** Error while creating card element: ', error.message);
        }).
        then(() => {
          this._elements = elements;
          this._elements.forEach((element) => {
            Helpers.updateHeight(element);
            if (this._hass) {
              element.hass = this._hass;
            } else {
              console.warn('*** _buildCard(); No hass object available for config');
            }
          });
        });
    } else {
      // console.log('*** no cards; hiding foot');
      // this._hideCards(true);
    }
  }

  async _createCardElement(card: LovelaceCardConfig) {
    let element: LovelaceCard;
    try {
      this._cardHelpers = await (window).loadCardHelpers();
      element = await this._cardHelpers.createCardElement(card);
      if (this._hass) {
        element.hass = this._hass;
      } else {
        console.warn(`*** _createCardElement(); Missing hass object for card ${card.type}`);
      }

    } catch (error) {
      console.warn(`*** Could not create card ${card.type}; ${error}`);
    }
    return element;
  }

  _updateLoop() {
    this._updateLoopId = setTimeout(() => { this._updateTime(); this._updateLoop(); }, 1000);
  }

  _updateTime(force = false) {

    this._alarmController.evaluateAlarms();
    const fontNum = (!this._config.clock_display_font) ? '0' : this._config.clock_display_font;
    let clockClass = 'fontFace' + fontNum;
    const showSeconds = false;
    // if (showSeconds) clockClass += ',seconds';
    // this._clockClasses = fontNum === '0' ? { clock: true } : { clock: true, [fontFaceClass]: true };
    // this._clockQ.classList.value = clockClass;
    if (showSeconds) {
      this._clockQ.classList.add(clockClass, 'seconds');
    } else {
      this._clockQ.classList.add(clockClass);
    }

    const time = dayjs().format(this._config.time_format === '24hr' ? 'HH:mm:ss' : 'h:mm:ss A');
    const isAlarmRinging = this._alarmController.isAlarmRinging();

    // // console.log('*** isAlarmRinging: ' + isAlarmRinging + '; ringingBegun: ' + this._ringingBegun);
    // if (isAlarmRinging && !this._ringingBegun) {
    //   console.log('*** adding "showButtons" class');
    //   this._ringingBegun = true;
    //   this._alarmButtonsQ.classList.add('showButtons');
    //   this._koboldClockQ.classList.remove('fullscreen');
    //   this._footQ.classList.remove('hideFoot');
    // } else if (!isAlarmRinging && this._ringingBegun) {
    //   console.log('*** removing "showButtons" class');
    //   this._ringingBegun = false;
    //   this._alarmButtonsQ.classList.remove('showButtons');
    //   this._koboldClockQ.classList.add('fullscreen');
    //   this._footQ.classList.add('hideFoot');
    // }

    if (this._clockQ &&
      (force
        || this._time !== time
        // || this._ringing !== isAlarmRinging
        // TODO: test if it is possible for these lastupdated variables to come apart now (maybe testing diff btwn last_updated for config on card and config on controller)
        // || this._controllersAlarmConfigLastUpdate !== this._config.last_updated
      )) {
      this._time = time;
      // this._ringing = isAlarmRinging;  //TODO: do we need both these variables? seems not; leave for testing
      // this._controllersAlarmConfigLastUpdate = this._config.last_updated;
      if (this._alarmController.controllerConfigLastUpdated !== this._config.last_updated) {
        //TODO: testing
        console.log('*** updateTime; controller config and card config differ');
        this._hass.callService('system_log', 'write', { 'message': '*** updateTime; controller config and card config differ', 'level': 'info' });
      }
      // console.log('*** updateTime(); last_updated: ', this._config.last_updated);

      let timeDisplay: string;
      // time variable includes seconds, even when showSeconds is false
      const [timeHr, timeMn, timeSd] = time.split(':');
      let colon1Kern = '';
      let colon2Kern = '';
      if (timeHr.slice(-1) === '1') colon1Kern = ' colonKernL';
      if (timeMn.slice(0, 1) === '1') colon1Kern = colon1Kern + ' colonKernR';
      if (showSeconds) {
        if (timeMn.slice(-1) === '1') colon2Kern = ' colonKernL';
        if (timeSd.slice(0, 1) === '1') colon2Kern = colon2Kern + ' colonKernR';
      }

      if (this._config.time_format === '24hr') {
        if (showSeconds) {
          timeDisplay = timeHr + '<span class="colon' + colon1Kern + '">:</span>' + timeMn + '<span class="colon' + colon2Kern + '">:</span>' + timeSd;
        } else {
          timeDisplay = timeHr + '<span class="colon' + colon1Kern + '">:</span>' + timeMn;
        }
      } else {
        let periodKern = '';
        const [timeSdNum, timeTxt] = timeSd.split(' ');
        if (showSeconds) {
          if (timeSdNum.slice(-1) === '1' || timeSdNum.slice(-1) === '7') periodKern = ' periodKern';
          timeDisplay = timeHr + '<span class="colon' + colon1Kern + '">:</span>' + timeMn + '<span class="colon' + colon2Kern + '">:</span>' + timeSdNum + '<span class="periodName' + periodKern + '">' + timeTxt + '</span>';
        } else {
          if (timeMn.slice(-1) === '1' || timeMn.slice(-1) === '7') periodKern = ' periodKern';
          timeDisplay = timeHr + '<span class="colon' + colon1Kern + '">:</span>' + timeMn + '<span class="periodName' + periodKern + '">' + timeTxt + '</span>';
        }
      }

      this._clockQ.innerHTML = `
        <div>
          ${timeDisplay}
        </div>
      `;

      // this._clockQ.innerHTML = `
      //   <svg>
      //     <text>${timeDisplay}</text>
      //   </svg>
      // `;

      // const mySvg = this._clockQ.querySelector('svg');
      // const bbox = mySvg.querySelector('text').getBBox();
      // mySvg.setAttribute('viewBox', [bbox.x, bbox.y, bbox.width, bbox.height].join(' '));
      // const periodName: SVGspanElement = mySvg.querySelector('tspan.periodName');
      // const periodNameBbox = periodName.getBBox();
      // const myX = bbox.width - (periodNameBbox.width / 2);
      // const myY = bbox.height - (periodNameBbox.height / 2);
      // periodName.setAttribute('x', myX.toString());
      // periodName.setAttribute('y', myY.toString());

      const dateFormat = this._config.time_format === '24hr' ? 'dddd, D MMMM' : 'dddd, MMMM D';
      this._dateQ.innerHTML = dayjs().format(dateFormat);
    }
  }

  _areAlarmsEnabled() {
    // return this._config.alarms_enabled || !!this._alarmController.nextAlarm.nap;
    return this._config.alarms_enabled || !!this._alarmController.nextAlarm.overridden;
  }

  _onAlarmChanged(event: CustomEvent) {
    // this only fires for changes to nextalarm in #alarmpicker element html of kobold-alarm-clock-card.js

    // if (!event.detail.nextAlarm.enabled) {
    //   this._alarmController.nextAlarm = { enabled: false, time: event.detail.nextAlarm.time };
    // } else {
    //   this._alarmController.nextAlarm = event.detail.nextAlarm;
    // }

    // let data;
    // if (!event.detail.nextAlarm.enabled) {
    //   data = { enabled: false, time: event.detail.nextAlarm.time };
    // } else {
    //   data = event.detail.nextAlarm;
    // }

    let data = { enabled: event.detail.nextAlarm.enabled, time: event.detail.nextAlarm.time };

    // hide cards during save to avoid flicker
    if (!this._config.hide_cards_default) this._hideCards(true);
    // allow animations to complete before saving
    window.setTimeout(() => {
      // this._alarmController.nextAlarmOld = data;
      // console.log('*** onAlarmChanged; data: ', data);
      // console.log('*** onAlarmChanged; nextAlarm: ', AlarmController.createNextAlarm(data, true, true));
      this._alarmController.nextAlarm = AlarmController.createNextAlarm(data, true, true);
    }, 250);
  }

  _handleAlarmButtonsClick(event: Event) {
    // console.log('*** click detected: ', event.target);
    this._alarmController[(<HTMLInputElement>event.target).id]();
  }

  // _toggleAlarmFullscreen(force: boolean) {
  //   if (!this._alarmController.isAlarmRinging()) {
  //     if (this._alarmClockClasses.fullscreen || !force) {
  //       this._alarmClockClasses = { fullscreen: false };
  //       this._footClasses = { hideFoot: false };
  //     } else {
  //       this._alarmClockClasses = { fullscreen: true };
  //       this._footClasses = { hideFoot: true };
  //     }
  //     if (force) {
  //       // save hide_cards_default(force) and remove obsolete option to configure in settings
  //     }
  //   }
  // }

  // _toggleClockFullscreen(forceHide: boolean | PointerEvent) {
  //   console.log('*** _toggleClockFullscreen fired');
  //   // console.log('*** alarmClockClasses: ', this._alarmClockClasses);
  //   let state = forceHide;
  //   if (!this._alarmController.isAlarmRinging()) {
  //     // if ((!this._alarmClockClasses.fullscreen && forceHide instanceof PointerEvent) || forceHide === true) {
  //     if ((!this._koboldClockQ.classList.contains('fullscreen') && forceHide instanceof PointerEvent) || forceHide === true) {
  //       // this._alarmClockClasses = { fullscreen: true };
  //       this._koboldClockQ.classList.add('fullscreen');
  //       // this._footClasses = { hideFoot: true };
  //       this._footQ.classList.add('hideFoot');
  //       state = true;
  //     } else if ((this._koboldClockQ.classList.contains('fullscreen') && forceHide instanceof PointerEvent) || forceHide === false) {
  //       // } else if ((this._alarmClockClasses.fullscreen && forceHide instanceof PointerEvent) || forceHide === false) {
  //       // this._alarmClockClasses = { fullscreen: false };
  //       // this._footClasses = { hideFoot: false };
  //       this._koboldClockQ.classList.remove('fullscreen');
  //       this._footQ.classList.remove('hideFoot');
  //       state = false;
  //     }
  //   }
  //   if (this._config.hide_cards_default !== state) this._alarmController.hideCardsDefault = state;
  // }

  _toggleHideCards(event) {
    event.stopPropagation();
    // console.log('*** _toggleHideCards fired');
    // console.log('*** _toggleHideCards; cards: ', this._config.cards);
    if (!this.preview && !this._alarmController.isAlarmRinging() && this._config.cards?.length > 0) {
      // if (!this._config.hide_cards_default) {
      //   // this._koboldClockQ.classList.add('fullscreen');
      //   // this._footQ.classList.add('hideFoot');
      //   state = true;
      // } else {
      //   // this._koboldClockQ.classList.remove('fullscreen');
      //   // this._footQ.classList.remove('hideFoot');
      //   state = false;
      // }
      // const state = !this._config.hide_cards_default ? true : false;
      if (!this._config.hide_cards_default) {
        // hiding cards
        this._hideCards(true);
        // allow animation to complete before saving
        window.setTimeout(() => {
          this._alarmController.hideCardsDefault = true;
        }, 250);
      } else {
        // showing cards
        this._alarmController.hideCardsDefault = false;
      }
    }
  }

  _hideCards(hideCards: boolean) {
    // hide cards requested, not already hiding cards
    if (hideCards && !this._koboldClockQ.classList.contains('fullscreen')) {
      this._koboldClockQ.classList.add('fullscreen');
      this._footQ.classList.add('hideFoot');
    }
    // show cards requested, not already showing cards
    if (!hideCards && this._koboldClockQ.classList.contains('fullscreen')) {
      this._koboldClockQ.classList.remove('fullscreen');
      this._footQ.classList.remove('hideFoot');
    }
  }

  _toggleLogoVisibility() {
    if (this._koboldLogoQ) {
      if (!this._koboldLogoQ.classList.contains('hidden')) {
        // if (this._koboldLogoQ.style.display !== 'none') {
        // this._koboldLogoQ.style.display = 'none';
        this._koboldLogoQ.classList.add('hidden');
      } else {
        // this._koboldLogoQ.style.display = 'block';
        this._koboldLogoQ.classList.remove('hidden');
      }
    }
  }

  async _showEditor(event) {
    event.stopPropagation();
    let tabNo = parseInt(event.target.id.slice(4));
    window.setMyEditMode();

    this._clockQ.style.display = 'none';
    // Helpers.getLovelace().style.display = 'none';
    // Helpers.getLovelace().style.filter = 'blur(10px)';
    //  dialogBackground styles

    if (Helpers.getLovelace().shadowRoot) {
      const dialogBackgroundStyle = 'hui-view, div.header { display: none; }';
      // const dialogBackgroundStyle = 'hui-view, div.header { opacity: 0; transition: opacity 750ms; }';
      const myStyle = document.createElement('style');
      myStyle.innerHTML = dialogBackgroundStyle;
      // console.log('*** lovelace style: ', Helpers.getLovelace().shadowRoot.querySelector('div'));
      Helpers.getLovelace().shadowRoot.querySelector('div').appendChild(myStyle);
    }

    let rounds = 0;
    // wait for availability of card-options; kobold card might be nested
    while (!this.closest('hui-card-options') && !this.getRootNode().host.closest('hui-card-options') && rounds++ < 5)
      await new Promise((r) => setTimeout(r, 100));
    if (rounds === 6) {
      console.warn('*** _showEditor(); Timed out waiting for edit mode');
    } else {
      const huiCardPath = this.closest<HuiCardOptions>('hui-card-options')?.path ?? this.getRootNode().host.closest('hui-card-options')?.path;
      Helpers.fireEvent('ll-edit-card', { path: huiCardPath }, this);

      let rounds = 0;
      while (!this._koboldEditor && rounds++ < 5)
        await new Promise((r) => setTimeout(r, 100));
      if (rounds === 6) {
        console.warn('*** _showEditor(); Timed out waiting for editor');
      } else {
        this._koboldEditor.alarmController = this._alarmController;
        Helpers.fireEvent('kobold-tab', { tab: tabNo }, this._koboldEditor.shadowRoot.querySelector('#kobold-card-config'));
        // this._koboldEditor.setAttribute('controller', 'chump'); //this._alarmController);
        // console.log('*** _showEditor; koboldEditor: ', this._koboldEditor);
        this._koboldEditor = undefined;
      }
    }
    this._clockQ.style.display = 'flex';
  }

  render() {
    this._nextAlarm = this._nextAlarm ?? this._alarmController.nextAlarm; //TODO: why not get nextalarm from this._config.next_alarm?
    // console.log('*** render(); nextAlarm: ', this._nextAlarm);
    // console.log('*** render(); nextAlarm.overridden: ', this._nextAlarm.overridden);

    // console.log('*** preview: ', this.preview);
    // console.log('*** render(); alarmClockClasses: ', this._alarmClockClasses);
    // console.log('*** render(); alarmClock class: ', this._koboldClockQ?.classList.value);

    // this._alarmClockClasses = this._alarmClockClasses || {};
    // this._alarmButtonsClasses = this._alarmButtonsClasses || {};
    // this._footClasses = this._footClasses || {};
    // this._clockClasses = this._clockClasses || { clock: true };

    // const isAlarmRinging = this._alarmController.isAlarmRinging();
    // if (isAlarmRinging && !this._ringingBegun) {
    //   this._ringingBegun = true;
    //   this._alarmClockClasses = { fullscreen: false };
    //   this._alarmButtonsClasses = { showButtons: true };
    //   this._footClasses = { hideFoot: false };
    // } else if (!isAlarmRinging && this._ringingBegun) {
    //   this._ringingBegun = false;
    //   this._alarmButtonsClasses = { showButtons: false };
    // }
    // const isAlarmRinging = this._alarmController.isAlarmRinging();
    // console.log('*** isAlarmRinging: ', isAlarmRinging);

    // if (isAlarmRinging && !this._ringingBegun) {
    //   this._ringingBegun = true;
    //   this._alarmButtonsQ.classList.add('showButtons');
    //   this._koboldClockQ.classList.remove('fullscreen');
    //   this._footQ.classList.remove('hideFoot');
    // } else if (!isAlarmRinging && this._ringingBegun) {
    //   this._ringingBegun = false;
    //   this._alarmButtonsQ.classList.remove('showButtons');
    // }

    const isAlarmRinging = this._alarmController.isAlarmRinging();

    // console.log('*** clock: ', this._clockQ);
    // console.log('*** alarmButtons: ', this._alarmButtonsQ);
    // console.log('*** isAlarmRinging: ' + isAlarmRinging + '; ringingBegun: ' + this._ringingBegun);

    if (this._clockQ) {
      if (isAlarmRinging && !this._ringingBegun) {
        // console.log('*** adding "showButtons" class');
        this._ringingBegun = true;
        this._footQ.classList.remove('hideFoot');
        this._alarmButtonsQ.classList.add('showButtons');
        this._koboldClockQ.classList.remove('fullscreen');
      } else if (!isAlarmRinging && this._ringingBegun) {
        // console.log('*** removing "showButtons" class');
        this._ringingBegun = false;
        // allow animations to complete before saving
        window.setTimeout(() => {
          this._alarmButtonsQ.classList.remove('showButtons');
        }, 250);
        this._koboldClockQ.classList.add('fullscreen');
        this._footQ.classList.add('hideFoot');
      }
    }

    return html`
        <ha-card>
          <div>

            <div id="koboldClock">
              <div id="alarmTop" class="meta">
                <div id="koboldLogo"></div>
                <div id="date"></div>
                <div class="settingsButtons">
                  <ha-icon id="tab-0" class="settingsButton button" icon="mdi:cog" @click=${this._showEditor}></ha-icon>
                  <ha-icon id="tab-1" class="napButton button" icon="mdi:sleep" @click=${this._showEditor}></ha-icon>
                </div>
                ${this._areAlarmsEnabled() ? html`
                    <alarm-picker
                        id="tab-2"
                        show-icon="true"
                        .nextAlarm=${this._nextAlarm}
                        .config=${this._config}
                        .time=${this._time}
                        @schedule-button-clicked=${this._showEditor}
                        @nextAlarm-changed=${this._onAlarmChanged}
                        @toggle-logo-visibility=${this._toggleLogoVisibility}
                        ></alarm-picker>
                  ` : html`
                  <ha-icon id="tab-2" class="alarmpickerButton button" icon="mdi:alarm"
                                @click=${this._showEditor}></ha-icon>
                  ` }
              </div>
              <div id="clock" @click=${this._toggleHideCards}>TIME</div>
            </div>
          </div>
        </ha-card>

        <div id="foot">
          <div id="alarmButtons">
            <div class="alarmButton button">
              <button id="snooze" @click=${this._handleAlarmButtonsClick}>Snooze</button>
            </div>
            <div class="alarmButton button">
              <button id="dismiss" @click=${this._handleAlarmButtonsClick}>Dismiss</button>
            </div>
          </div>

          <div id="extraInfo">
              <div class="loading" style="text-align: center;">Loading cards...</div>
          </div>
        </div>
      `;
  }

  static styles = css`

    /* ************ */
    /* *** main *** */
    /* ************ */

    /* narrow screen, container size */
    /*@media (max-width: 750px) {
      div#alarmTop > div#koboldLogo {
        display: none;
      }
    }
    @container (max-width: 750px) {
      div#alarmTop > div#koboldLogo {
        display: none;
      }
    }*/

    :host {
      --kobold-color: #696969;
      --kobold-color-rgb: 105,105,105;
    }
    :host(.dark) {
      --ha-card-background: #000000;
      --card-background-color: #000000;
    }

    #koboldClock {
      container-type: inline-size;
      padding: 1.5rem;
      height: 65vh;
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      opacity: 1;
      transition: height 240ms, opacity 240ms;
    }

    :host(.narrow) #alarmTop div#koboldLogo {
      display: none;
    }

    #koboldClock.fullscreen {
      height: 100vh;
    }

    #koboldClock.fullscreen #clock {
      padding-top: 0;
    }

    #alarmTop {
      position: relative;
      font-size: calc(1rem + 1vh);
      font-size: calc(0.5cqw + 1em);
      display: flex;
      justify-content: space-between;
      height: 4vh;
      white-space: nowrap;
      align-items: center;
      color: var(--kobold-color);
    }

    #alarmTop div#koboldLogo {
      background-image: url("data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20width%3D%27750%27%20height%3D%27175%27%20viewBox%3D%270%200%20198.437%2046.302%27%3E%3Cdefs%3E%3Cpath%20id%3D%27a%27%20d%3D%27M134.532%20279.996h1013.197v243.84H134.532z%27%2F%3E%3C%2Fdefs%3E%3Cg%20aria-label%3D%27KOBOLD%27%20style%3D%27font-size%3A192px%3Bline-height%3A1.25%3Bwhite-space%3Apre%3Bshape-inside%3Aurl%28%23a%29%27%20transform%3D%27translate%28-39.822%2011.568%29%20scale%28.26458%29%27%3E%3Cpath%20d%3D%27M297.007%20381.147v7.723l-36.756%2043.764q9.01%2010.87%2018.307%2022.025%209.439%2011.013%2018.45%2021.739v7.723h-23.17l-33.753-40.331H219.92v40.331h-22.311V381.147h22.31v40.331h20.166q3.29-3.718%206.436-7.58%203.147-3.861%206.436-7.723l20.881-25.028zm232.264%2040.474q0%204.005-1%206.58%202.144%202.717%203.575%206.292%201.43%203.433%201.43%207.151v21.31q0%204.434-1.716%208.295-1.717%203.862-4.577%206.722-2.86%202.86-6.722%204.577-3.861%201.573-8.295%201.573h-81.664V381.147h77.802q4.291%200%208.153%201.716%203.861%201.573%206.721%204.434%203.004%202.86%204.577%206.722%201.716%203.861%201.716%208.295zM452.47%20461.81h58.352v-18.879H452.47Zm0-41.19h54.347v-17.162H452.47Zm222.958-39.616h22.168v80.806h80.807v22.311H675.428Zm193.22.143q4.434%200%208.295%201.716%203.862%201.573%206.722%204.434%202.86%202.86%204.577%206.722%201.716%203.861%201.716%208.295v60.64q0%204.434-1.716%208.295-1.717%203.862-4.577%206.722-2.86%202.86-6.722%204.577-3.861%201.573-8.295%201.573h-81.664V381.147Zm-59.496%2080.663h58.352v-58.352h-58.352z%27%20style%3D%27font-family%3AOrbitron%3B-inkscape-font-specification%3AOrbitron%3Bstroke-width%3A.744895%27%20transform%3D%27translate%28-33.794%20-401.053%29%20scale%281.02854%29%27%2F%3E%3Cpath%20d%3D%27M419.64%20675.367A117.536%20117.536%200%200%200%20302.101%20792.9%20117.536%20117.536%200%200%200%20419.64%20910.437%20117.536%20117.536%200%200%200%20537.172%20792.9%20117.536%20117.536%200%200%200%20419.64%20675.367Zm-.71%2012.63%203.237%2036.913%203.195%2036.426h.043l-.032.141.032.346h-.106l-3.132%2014.648-3.237%2015.135-3.237-15.135-3.135-14.648h-.102l.028-.346-.028-.14h.042l3.195-36.427zm-1.728%20106.955-5.173%208.6-5.007%208.322.078.138-.194.06-.05.081-.031-.056-20.703%206.41-20.977%206.496%2016.118-14.916%2015.9-14.722-.032-.057h.095l.148-.14.082.137%209.71-.173z%27%20style%3D%27fill%3A%23000%3Bstroke-width%3A.999999%27%20transform%3D%27translate%2895.652%20-407.931%29%20scale%28.56969%29%27%2F%3E%3Cpath%20d%3D%27M705.391%20675.367A117.536%20117.536%200%200%200%20587.855%20792.9%20117.536%20117.536%200%200%200%20705.39%20910.437%20117.536%20117.536%200%200%200%20822.925%20792.9%20117.536%20117.536%200%200%200%20705.39%20675.367Zm.54%2012.63%203.237%2036.913%203.195%2036.426h.042l-.032.141.032.346h-.106l-3.131%2014.648-3.237%2015.135-3.24-15.135-3.132-14.648h-.102l.028-.346-.028-.14h.042l3.191-36.427zm1.57%20106.856%2010.035.18%209.715.173.077-.138.152.141h.091l-.031.057%2015.9%2014.722%2016.118%2014.916-20.978-6.495-20.699-6.411-.031.056-.05-.08-.197-.06.077-.138-5.007-8.322z%27%20style%3D%27fill%3A%23000%3Bstroke-width%3A.999999%27%20transform%3D%27translate%28185.991%20-407.931%29%20scale%28.56969%29%27%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E");

      height: calc(0.55em + 1vh);
      height: calc(0.05cqw + 1em);
      width: 100%;
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center center;
      filter: invert(1) brightness(0.41); /* #696969 */
      position: absolute;
      display: block;
    }
    #alarmTop div#koboldLogo.hidden {
      display: none;
    }

    #clock {
      -webkit-font-smoothing: subpixel-antialiased !important;
      text-rendering:optimizeLegibility !important;
      overflow: hidden;
      transition: padding-top 240ms;
      padding-top: 0.15em;
      /*padding-right: 0.05em;*/
      display: flex;
      justify-content: center;
      height: 100%;
      /*font-size: calc(14vw + 5em);*/
      /*font-size: 40vh;*/
      font-size: 18.23em;
      font-size: calc(14cqw + 5em);
      /*font-size: 100vh;
      font-size: 100cqh;*/
      letter-spacing: -0.02em;
      /*font-weight: 500;*/
      align-items: center;
      white-space-collapse: collapse;
      text-wrap-mode: nowrap;
      white-space: nowrap;
    }
    :host(.dark) #clock {
      text-shadow: 0 0 0.04em var(--primary-text-color);
    }
    /* Safari before v16 */
    @supports not (trim-margin: block) {
      @media not all and (min-resolution: 0.001dpcm) {
        /* Early Safari: bounding box incorrect when child in vertical writing mode */
        #clock {
          padding-right: 0.2em;
        }
      }
    }
    /*#clock svg {
      fill: currentColor;
    }*/
    #clock .periodName {
      position: relative;
      /*bottom: 2.2vh;*/
      bottom: 0.2em;
      margin-left: -0.2em;
      /*font-size: 31%;*/
      font-size: 0.3em;
      font-weight: 900 !important;
      writing-mode: vertical-lr;
      /*writing-mode: tb;*/ /* SVG 1 syntax */
      /*glyph-orientation-vertical: 0;*/ /* SVG 1 syntax */
      text-orientation: upright;
      letter-spacing: -0.15em;
    }
    /* Firefox */
    @-moz-document url-prefix() {
      #clock .periodName {
        letter-spacing: -0.05em;
      }
    }
    /* Safari */
    @media not all and (min-resolution: 0.001dpcm) {
      #clock .periodName {
        letter-spacing: -0.05em;
      }
    }
    #clock .periodName.periodKern {
      margin-left: -0.3em;
    }
    #clock .colonKernL {
      margin-left: -0.1em;
    }
    #clock .colonKernR {
      margin-right: -0.05em;
    }
    #clock .colon {
      position: relative;
      /*bottom: 3.3vh;*/
      bottom: 0.09em;
    }

    #clock.fontFace1 {
      font-family: 'noto_sansmedium';
      /*font-family: 'Noto Sans', sans-serif;*/
      /*font-optical-sizing: auto;*/
      /*font-weight: 600;*/
      /*font-weight: normal;*/
      font-style: normal;
      /*font-variation-settings: 'wdth' 87.5;*/
      letter-spacing: 0;
    }
    #clock.fontFace1 .periodName {
      /*bottom: 4vh;*/
      bottom: 0.43em;
      letter-spacing: -0.5em;
    }
    /* Firefox */
    @-moz-document url-prefix() {
      #clock.fontFace1 .periodName {
        bottom: 0.12em;
        letter-spacing: -0.05em;
      }
    }
    /* Safari */
    @media not all and (min-resolution: 0.001dpcm) {
      #clock.fontFace1 .periodName {
        bottom: 0.12em;
        letter-spacing: -0.05em;
      }
    }
    /*#clock.fontFace1 .periodName.periodKern {
      margin-left: -0.5em;
    }*/

    #clock.fontFace2 {
      font-family: 'oswald_regularregular';
      /*font-family: 'Oswald', sans-serif;*/
      /*font-optical-sizing: auto;*/
      /*font-weight: 600;*/
      /*font-weight: normal;*/
      font-style: normal;
      letter-spacing: 0;
    }
    #clock.fontFace2 .colonKernL {
      margin-left: -0.05em;
    }
    #clock.fontFace2 .colonKernR {
      margin-right: 0;
    }
    #clock.fontFace2 .periodName {
      /*bottom: 1.8vh;*/
      /*letter-spacing: -0.4em;*/
      letter-spacing: 0;
    }

    #clock.fontFace3 {
      font-family: 'ibm_plex_sansmedium';
      /*font-family: 'IBM Plex Sans', sans-serif;*/
      /*font-weight: 600;*/
      /*font-weight: normal;*/
      font-style: normal;
      letter-spacing: 0;
    }
    #clock.fontFace3 .periodName {
      letter-spacing: -0.4em;
      /*bottom: 4.5vh;*/
      bottom: 0.43em;
    }
    /* Firefox */
    @-moz-document url-prefix() {
      #clock.fontFace3 .periodName {
        letter-spacing: -0.05em;
        bottom: 0.19em;
      }
    }
    /* Safari */
    @media not all and (min-resolution: 0.001dpcm) {
      #clock.fontFace3 .periodName {
        letter-spacing: -0.05em;
        bottom: 0.19em;
      }
    }
    #clock.fontFace3 .colonKernL {
      margin-left: 0;
    }
    #clock.fontFace3 .colonKernR {
      margin-right: 0;
    }

    .settingsButtons {
      text-align: right;
      width: 100%;
      margin-right: 1em;
      display: flex;
      justify-content: space-between;
    }

    .settingsButton.button {
      margin: 0 1em;
    }

    #foot {
      background-color: var(--ha-card-background, var(--card-background-color));
      position: relative;
      height: 35vh;
      display: flex;
      transition: height 240ms;
    }

     #foot.hideFoot {
      height: 0;
      overflow: hidden;
    }

    #alarmButtons, #extraInfo {
      justify-content: space-between;
      box-sizing: border-box;
      height: 35vh;
      gap: 10px;
    }

    #extraInfo {
      display: flex;
      position: absolute;
      width: 100%;
      top: 0;
    }

    #alarmButtons {
      display: none;
      position: relative;
      z-index: 8;
      background-color: var(--ha-card-background, var(--card-background-color));
      flex: auto;
    }

    #alarmButtons.showButtons {
      display: flex;
    }

    #alarmButtons > *, #extraInfo > * {
      flex: 1 1 0;
    }

    .button {
      cursor: pointer;
    }

    .alarmButton {
      display: flex;
      justify-content: center;
      height: 100%;
    }

    .alarmButton button {
      color: var(--ha-card-background, var(--card-background-color)) !important;
      background-color: var(--kobold-color);
      border: none;
      font-size: 4em;
      font-weight: 900;
      width: 100%;
      border-radius: 12px;
      transition: background-color 120ms;
    }

    .alarmButton button:hover {
      /*background-color: rgba(255,255,255,0.90);*/
      /*opacity: 0.6;*/
      background-color: rgba(var(--kobold-color-rgb),0.75); /* #696969 */
    }
    :host(.dark) .alarmButton button {
      background-color: var(--primary-text-color);
      text-shadow: 0 0 5px rgba(0,0,0,0.4);
      text-shadow: 0 0 5px rgb(from var(--ha-card-background, var(--card-background-color)) r g b / 0.4);
      box-shadow: 0 0 5px -1px var(--primary-text-color);
    }
    :host(.dark) .alarmButton button:hover {
      background-color: rgba(225,225,225,0.75);
      background-color: rgb(from var(--primary-text-color) r g b / 0.75);
    }


    /* *************** */
    /* *** preview *** */
    /* *************** */

    :host([preview]) #koboldClock {
      /*height: 65vh;*/
      height: 15rem;
    }
    :host([preview]) #clock {
      text-shadow: none;
      font-size: calc(5em + 100%);
      /*font-size: 10em;*/
      /*font-size: 12em;*/
      font-size: calc(5cqw + 5em);
    }
    :host([preview]) #clock.seconds {
      /*font-size: 7em;*/
    }
    :host([preview]) #clock .periodName {
      margin-left: 0.3em;
      /*bottom: 0.3em;*/
    }
    :host([preview]) #clock .periodName.periodKern {
      margin-left: 0.01em;
    }
    :host([preview]) #clock.fontFace3 .periodName.periodKern {
      margin-left: 0.1em;
    }
    :host([preview]) #clock .colon {
      /*bottom: 0.07em;*/
    }

    /*:host([preview]) #alarmTop #koboldLogo {
      filter: invert(1) brightness(0);
      display: block !important;
    }*/

    :host([preview]) div#alarmTop > div#koboldLogo {
      filter: invert(1) brightness(0);
      display: block;
    }

    :host([preview].dark) div#alarmTop > div#koboldLogo {
      filter: invert(1) brightness(0.883); /* #e1e1e1 */
    }

    :host([preview]) #foot, :host([preview]) #date, :host([preview]) #alarmTop .settingsButtons, :host([preview]) #alarmTop alarm-picker, :host([preview]) .alarmpickerButton {
      display: none;
    }
  `;
}

